---
import Base from "../../layouts/Base.astro";
import { type GetStaticPathsOptions } from "astro";
import { getCollection } from "astro:content";
import Breadcrumbs from "../../components/common/Breadcrumbs.astro";
import { AllowedRoutes } from "../../route";
import Pager from "../../components/button/Pager";
import ProfileCard from "../../components/card/ProfileCard.astro";
import NoItem from "../../components/common/NoItem.astro";
import BookmarkCard from "../../components/card/BookmarkCard";
import ogs from "open-graph-scraper";

export interface OgpData {
	url: string;
	resUrl: string;
	sitename: string;
	title: string;
	description: string;
	image: string;
	favicon: string;
}

export const getStaticPaths = async ({ paginate }: GetStaticPathsOptions) => {
	const validateImageUrl = async (image: string) => {
		if (!image || image === "") return "";

		try {
			const res = await fetch(image, { method: "GET" });
			const contentType = res.headers.get("content-type");

			if (res.ok && contentType?.startsWith("image/")) {
				// base64 encode
				if (image.length > 1000) {
					const buffer = await res.arrayBuffer();
					const base64 = Buffer.from(buffer).toString("base64");
					return `data:${contentType};base64,${base64}`;
				}

				return image;
			} else {
				return "";
			}
		} catch (err) {
			return "";
		}
	};

	const validateFaviconUrl = async (url: string, favicon: string) => {
		if (!favicon || favicon === "") return "";

		let reqUrl;

		if (/^https?:\/\//.test(favicon)) {
			reqUrl = favicon;
		} else if (favicon.startsWith("/")) {
			reqUrl = `${new URL(url).origin}${favicon}`;
		} else {
			reqUrl = `${new URL(url).origin}/${favicon}`;
		}

		try {
			const res = await fetch(reqUrl, {
				method: "GET",
				headers: {
					"User-Agent":
						"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36",
				},
			});

			const contentType = res.headers.get("content-type");

			if (res.ok && contentType?.startsWith("image/")) {
				return res.url;
			} else {
				return "";
			}
		} catch (err) {
			return "";
		}
	};

	const fetchOgp = async (url: string): Promise<OgpData> => {
		const data = {
			url: url,
			resUrl: "",
			sitename: "No title",
			title: "No title",
			description: "No description",
			image: "",
			favicon: "",
		};

		try {
			const { result } = await ogs({ url });

			const image = await validateImageUrl(result.ogImage?.[0]?.url ?? "");
			const favicon = await validateFaviconUrl(url, result.favicon ?? "");

			data.resUrl = result.ogUrl ?? "";
			data.sitename = result.ogSiteName ?? "";
			data.title = result.ogTitle ?? "";
			data.description = result.ogDescription ?? "";
			data.image = image;
			data.favicon = favicon;

			return data;
		} catch (error) {
			console.error(`[remark-bare-link] Error: ${error}`);
			return data;
		}
	};

	const bookmarks = await getCollection("bookmark", ({ data }) => {
		return import.meta.env.PROD ? !data.isDraft : true;
	});

	const bookmarksWithOgp = await Promise.all(
		bookmarks.map(async ({ data }) => {
			const ogp = await fetchOgp(data.url);
			return { name: data.name, ...ogp };
		})
	);

	return paginate(bookmarksWithOgp, { pageSize: 10 });
};

const { page } = Astro.props;

const route = new AllowedRoutes(Astro.url.pathname);
const { meta } = route.getRootPageMeta();
---

<Base title={`${meta.name} | ${import.meta.env.APP_NAME}`} description=`${meta.description}`>
	<section class="pt-8 w-full flex flex-col lg:flex-row">
		<article class="min-h-[calc(100dvh-8rem)] sm:min-h-0 flex flex-col gap-8 lg:w-[65%]">
			<Breadcrumbs count={page.data.length} />
			<h1 class="flex justify-center text-4xl lg:text-6xl font-extrabold">{meta.name}</h1>
			<ul class="flex flex-col gap-8">
				{
					page.data.length > 0 ? (
						page.data.map((bookmark) => {
							return (
								<li class="w-full">
									<BookmarkCard bookmark={bookmark} />
								</li>
							);
						})
					) : (
						<NoItem message="ブックマークがありません" />
					)
				}
			</ul>
			<Pager page={page} />
		</article>
		<aside
			class="pt-16 lg:pt-0 flex flex-col gap-8 lg:w-[35%] lg:pl-[3.95rem] 2xl:pl-[5.925rem] 2xl:pr-[1.975rem]"
		>
			<div class="lg:sticky lg:top-8 flex flex-col sm:gap-8">
				<ProfileCard />
			</div>
		</aside>
	</section>
</Base>
