---
import Base from "../../layouts/Base.astro";
import { type GetStaticPathsOptions } from "astro";
import { getCollection } from "astro:content";
import Breadcrumbs from "../../components/common/Breadcrumbs.astro";
import { AllowedRoutes } from "../../route";
import Pager from "../../components/button/Pager";
import ProfileCard from "../../components/card/ProfileCard.astro";
import NoItem from "../../components/common/NoItem.astro";
import BookmarkCard from "../../components/card/BookmarkCard";
import ogs from "open-graph-scraper";
import type { ImageObject } from "open-graph-scraper/types";

export type BookmarkWithOgp = {
	url: string;
	resUrl?: string;
	name: string;
	sitename?: string;
	title?: string;
	description?: string;
	image?: ImageObject[];
	favicon?: string;
};

export const getStaticPaths = async ({ paginate }: GetStaticPathsOptions) => {
	const getOgp = async (url: string) => {
		try {
			const { result } = await ogs({ url });
			return result;
		} catch (error) {
			console.error("Error fetching Open Graph Data:", error);
			return {};
		}
	};

	const bookmarks = await getCollection("bookmark", ({ data }) => {
		return import.meta.env.PROD ? !data.isDraft : true;
	});

	const bookmarksWithOgp = await Promise.all(
		bookmarks.map(async ({ data }) => {
			const ogp = await getOgp(data.url);

			return {
				url: data.url,
				resUrl: ogp.ogUrl,
				name: data.name,
				sitename: ogp.ogSiteName,
				title: ogp.ogTitle,
				description: ogp.ogDescription,
				image: ogp.ogImage,
				favicon: ogp.favicon,
			} satisfies BookmarkWithOgp;
		})
	);

	return paginate(bookmarksWithOgp, { pageSize: 10 });
};

const { page } = Astro.props;

const route = new AllowedRoutes(Astro.url.pathname);
const { meta } = route.getRootPageMeta();
---

<Base title={`${meta.name} | ${import.meta.env.APP_NAME}`} description=`${meta.description}`>
	<section class="pt-8 w-full flex flex-col lg:flex-row">
		<article class="min-h-[calc(100dvh-8rem)] sm:min-h-0 flex flex-col gap-8 lg:w-[65%]">
			<Breadcrumbs count={page.data.length} />
			<h1 class="flex justify-center text-4xl lg:text-6xl font-extrabold">{meta.name}</h1>
			<ul class="flex flex-col gap-8">
				{
					page.data.length > 0 ? (
						page.data.map((bookmark) => {
							return (
								<li class="w-full">
									<BookmarkCard bookmark={bookmark} />
								</li>
							);
						})
					) : (
						<NoItem message="ブックマークがありません" />
					)
				}
			</ul>
			<Pager page={page} />
		</article>
		<aside
			class="pt-16 lg:pt-0 flex flex-col gap-8 lg:w-[35%] lg:pl-[3.95rem] 2xl:pl-[5.925rem] 2xl:pr-[1.975rem]"
		>
			<div class="lg:sticky lg:top-8 flex flex-col sm:gap-8">
				<ProfileCard />
			</div>
		</aside>
	</section>
</Base>
