---
import Base from "../layouts/Base.astro";
import { AllowedRoutes } from "../route";
import Breadcrumbs from "../components/common/Breadcrumbs.astro";
import { Image } from "astro:assets";
import ProfileImage from "../assets/images/profile-image.jpg";

import {
	SiMoleculer,
	SiZenn,
	SiTwitter,
	SiPython,
	SiPandas,
	SiScikitlearn,
	SiNumpy,
	SiScipy,
	SiGnubash,
	SiTypescript,
	SiVuedotjs,
	SiSolid,
	SiTailwindcss,
	SiAstro,
	SiNuxtdotjs,
	SiNodedotjs,
	SiPioneerdj,
	SiWantedly,
} from "solid-icons/si";

import { IoDesktopOutline } from "solid-icons/io";
import { ImHeadphones } from "solid-icons/im";

import { getCollection } from "astro:content";

import WorkCard from "../components/card/WorkCard";
import MacintoshInterfaceCard from "../components/card/MacintoshInterfaceCard";
import ProfileContentCard from "../components/card/ProfileContentCard";
import GitHubContributionsCard from "../components/card/GitHubContributionsCard";

const works = await getCollection("work", ({ data }) => {
	return import.meta.env.PROD ? !data.isDraft : true;
});

const sortedWorks = works.sort((a, b) => {
	return b.data.date.getTime() - a.data.date.getTime();
});

const routes = new AllowedRoutes(Astro.url.pathname);
const { meta } = routes.getSubsetPageMeta();

// GitHub GraphQL API をたたく
const today = new Date();
const to = new Date(
	today.getFullYear(),
	today.getMonth(),
	today.getDate(),
	23,
	59,
	59
).toISOString();
const fromDate = new Date(today);
fromDate.setFullYear(fromDate.getFullYear() - 1);
fromDate.setDate(fromDate.getDate() + 2);
fromDate.setHours(0, 0, 0, 0);
const from = fromDate.toISOString();

const response = await fetch("https://api.github.com/graphql", {
	method: "POST",
	headers: {
		"Content-Type": "application/json",
		Authorization: `Bearer ${import.meta.env.GITHUB_ACCESS_TOKEN}`,
	},
	body: JSON.stringify({
		query: `
			query($user: String!, $from: DateTime!, $to: DateTime!) {
				user(login: $user){
					contributionsCollection(from: $from, to: $to) {
						contributionCalendar {
							totalContributions
							weeks {
								contributionDays {
									contributionCount
									date
								}
							}
						}
					}
				}
			}
		`,
		variables: {
			user: import.meta.env.GITHUB_USERNAME,
			from: from,
			to: to,
		},
	}),
});

const gitHubContributions = await response.json();
const gitHubCalendar = gitHubContributions.data.user.contributionsCollection.contributionCalendar;

const whoami = {
	contentType: "whoami",
	title: import.meta.env.APP_OWNER,
	role: import.meta.env.APP_OWNER_ROLE,
	description:
		"計算化学の大学院生 / Web フロントエンド開発者です。研究では分子動力学 (MD)、量子化学計算、機械学習を扱っています。Web 開発は趣味として手すさび程度にやっていますが、その知見が研究活動に活きることがあるのが地味にうれしいところです。",
};

const major = {
	type: "major",
	title: {
		text: "Computational Chemistry",
		icon: SiMoleculer,
	},
	description:
		"ソフトマターと呼ばれる物質群の性質に関する研究をしています。とりわけ、優れた電気伝導性を示す有機半導体材料を計算化学で効率的に探索することをやっています。",
	skills: [
		{ icon: SiPython, link: "https://www.python.org/" },
		{ icon: SiNumpy, link: "https://numpy.org/" },
		{ icon: SiPandas, link: "https://pandas.pydata.org/" },
		{ icon: SiScikitlearn, link: "https://scikit-learn.org/" },
		{ icon: SiScipy, link: "https://www.scipy.org/" },
		{ icon: SiGnubash, link: "https://www.gnu.org/software/bash/" },
	],
};

const tech = {
	type: "tech",
	title: {
		text: "Web Development",
		icon: IoDesktopOutline,
	},
	description:
		"JavaScript フレームワークによる静的 Web サイト構築 (Jamstack) を得意としています。最近は Astro を好んで使います。バックエンドも遊びで触ることがあります。",
	skills: [
		{ icon: SiTypescript, link: "https://www.typescriptlang.org/" },
		{ icon: SiVuedotjs, link: "https://ja.vuejs.org/" },
		{ icon: SiSolid, link: "https://www.solidjs.com/" },
		{ icon: SiTailwindcss, link: "https://tailwindcss.com/" },
		{ icon: SiAstro, link: "https://astro.build/" },
		{ icon: SiNuxtdotjs, link: "https://nuxt.com/" },
		{ icon: SiNodedotjs, link: "https://nodejs.org/ja/" },
	],
};

const interest = {
	type: "interest",
	title: {
		text: "Indies Electronic Music",
		icon: ImHeadphones,
	},
	description:
		"インディーズの電子音楽を好んで聴いています。最近は聴くだけでなく、DJ コントローラーで MIX して遊ぶとかもします。いつか作曲もできるようになるといいなぁ。",
	skills: [
		{ icon: SiPioneerdj, link: "https://www.pioneerdj.com/", subText: "rekordbox / DDJ-FLX4" },
	],
};
---

<Base title={`${meta.name} | ${import.meta.env.APP_NAME}`} description=`${meta.description}`>
	<section
		class="flex flex-col gap-8 xl:gap-16 index-gradient py-8 px-4 md:px-8 lg:px-12 2xl:px-48 w-[calc(100%+2rem)] sm:w-[calc(100%+12rem)] lg:w-[calc(100%+8rem)] mx-[-1rem] sm:mx-[-6rem] lg:mx-[-4rem]"
	>
		<Breadcrumbs />
		<!-- <h2
			class="text-metalic-light dark:text-metalic-dark text-center font-extrabold text-4xl lg:text-6xl tracking-wide"
		>
			Who am I?
		</h2> -->
		<MacintoshInterfaceCard title="$ whoami">
			<div class="flex flex-col xl:flex-row xl:justify-between gap-8 xl:gap-16">
				<div class="w-full xl:w-1/2">
					<div class="w-full flex items-center gap-4">
						<div class="w-16 h-16 lg:w-28 lg:h-28 2xl:w-36 2xl:h-36">
							<Image
								src={ProfileImage}
								alt="Profile Image"
								class="w-full h-full object-cover rounded-full"
							/>
						</div>
						<div class="w-2/3 flex flex-col gap-2">
							<h3 class="font-bold text-2xl lg:text-5xl 2xl:text-6xl">
								{whoami.title}
							</h3>
							<span class="text-[0.6rem] md:text-xs lg:text-sm 2xl:text-lg">{whoami.role}</span>
						</div>
					</div>
					<p class="tracking-wide sm:text-[1.125rem] lg:text-[1.25rem] mt-3 text-muted-foreground">
						{whoami.description}
					</p>
					<ul class="flex items-center gap-4 lg:gap-6 mt-2">
						<li>
							<a
								class="text-foreground hover:opacity-70 transition duration-150"
								href={import.meta.env.ZENN_URL}
								target="_blank"
								rel="noopener noreferrer"
							>
								<SiZenn class="w-4 h-4 lg:w-5 lg:h-5 2xl:w-6 2xl:h-6" />
							</a>
						</li>
						<li>
							<a
								class="text-foreground hover:opacity-70 transition duration-150"
								href={import.meta.env.X_URL}
								target="_blank"
								rel="noopener noreferrer"
							>
								<SiTwitter class="w-4 h-4 lg:w-5 lg:h-5 2xl:w-6 2xl:h-6" />
							</a>
						</li>
						<li>
							<a
								class="text-foreground hover:opacity-70 transition duration-150"
								href={import.meta.env.WANTEDLY_URL}
								target="_blank"
								rel="noopener noreferrer"
							>
								<div class="ribbon -ml-2">
									<SiWantedly class="w-4 h-4 lg:w-5 lg:h-5 2xl:w-6 2xl:h-6" />
									<span class="text-md font-semibold">Job Waiting!</span>
								</div>
							</a>
						</li>
					</ul>
				</div>
				<div class="lg:hidden w-full border-t border-muted-background"></div>
				<GitHubContributionsCard
					calendar={gitHubCalendar}
					githubUsername={import.meta.env.GITHUB_USERNAME}
					githubUrl={import.meta.env.GITHUB_URL}
					client:load
				/>
			</div>
		</MacintoshInterfaceCard>
		<!-- <h2
			class="mt-32 xl:mt-16 text-metalic-light dark:text-metalic-dark text-center font-extrabold text-4xl lg:text-6xl tracking-wide"
		>
			Profile
		</h2> -->
		<div class="flex flex-col lg:flex-row lg:justify-around gap-8">
			<ProfileContentCard data={major} />
			<ProfileContentCard data={tech} />
			<ProfileContentCard data={interest} />
		</div>
		<!-- <h2
			class="mt-32 xl:mt-16 text-metalic-light dark:text-metalic-dark text-center font-extrabold text-4xl lg:text-6xl tracking-wide"
		>
			Recent Works
		</h2> -->
		<ul class="w-full flex flex-col lg:flex-row lg:flex-wrap items-center gap-8">
			{
				sortedWorks.map((work) => (
					<li class="w-full md:w-[calc(50%-1rem)] xl:w-[calc(25%-1.5rem)]">
						<WorkCard work={work} client:visible />
					</li>
				))
			}
		</ul>
	</section>
</Base>

<style>
	.ribbon {
		position: relative;
		display: inline-flex;
		align-items: center;
		background-color: #a3e635;
		gap: 0.5rem;
		height: 40px;
		padding: 0 0 0 30px;
		color: rgba(var(--foreground), 1);
		font-weight: bold;
		text-align: center;
	}

	.ribbon::before,
	.ribbon::after {
		position: absolute;
		top: 0;
		width: 0px;
		height: 0px;
		border-style: solid;
		border-width: 20px 0px 20px 20px;
		content: "";
	}

	.ribbon::before {
		left: 0;
		border-color: transparent rgba(var(--background), 1);
	}

	.ribbon::after {
		right: -20px;
		border-color: transparent #a3e635;
	}
</style>
