---
import Base from "../../../layouts/Base.astro";
import { getCollection } from "astro:content";
import Breadcrumbs from "../../../components/common/Breadcrumbs.astro";
import ProfileCard from "../../../components/card/ProfileCard.astro";
import TagCardsPanel from "../../../components/large/TagCardsPanel";
import CategoriesPanel from "../../../components/large/CategoriesPanel";
import { AllowedRoutes } from "../../../utils/common/route";
import { IoGitCommitOutline } from "solid-icons/io";

export const getStaticPaths = (async () => {
  const articles = await getCollection("article", ({ data }) => {
    return import.meta.env.PROD ? data.isDraft === false : true;
  });

  const publishDates = articles.map(({ data }) => {
		return {
			year: data.publishDate.getFullYear(),
			month: data.publishDate.getMonth() + 1,
		};
	});

  const uniquePublishDates = Array.from(
		new Map(publishDates.map((date) => [JSON.stringify(date), date])).values()
	);

  return uniquePublishDates.map(({ year, month }) => {
    const sortedAndfilteredArticles = articles.filter(({ data }) => {
			return (
				data.publishDate.getFullYear() === year &&
				data.publishDate.getMonth() + 1 === month
			);
    }).sort((a, b) => {
      return b.data.publishDate.getTime() - a.data.publishDate.getTime();
    });
    return {
      params: { year: year.toString(), month: month.toString().padStart(2, "0") },
      props: { articles: sortedAndfilteredArticles },
    };
  })
});

const { year, month } = Astro.params;
const { articles } = Astro.props;

const route = new AllowedRoutes(Astro.url.pathname);
const { meta } = route.getSubsetPageMeta();
---

<Base title={`${meta.name} for ${year}-${month} | ${import.meta.env.APP_NAME}`} description=`${meta.description}`>
	<section class="pt-8 w-full flex flex-col lg:flex-row">
    <article class="min-h-[calc(100dvh-8rem)] sm:min-h-0 flex flex-col gap-8 lg:w-[65%]">
    <Breadcrumbs count={articles.length} archive={{ year, month }} />
    <h1 class="flex justify-center text-4xl lg:text-6xl font-extrabold">{`${year}-${month}`}</h1>
    <div class="flex justify-center">
      <ul class="flex flex-col">
        {articles.map(({ slug, data }) => {
          return (
            <li class="w-full my-[-0.4rem] lg:my-[-0.5rem] 2xl:my-[-0.6rem]">
              <div class="flex items-center gap-1">
                <time class="font-code lg:text-xl xl:text-2xl 2xl:text-3xl font-semibold text-muted-foreground" datetime={data.publishDate.toISOString()}>
                  {data.publishDate.getDate().toString().padStart(2, '0')}
                </time>
                <div class="text-muted-foreground text-5xl sm:text-6xl xl:text-7xl 2xl:text-8xl">
                  <IoGitCommitOutline class="rotate-90" />
                </div>
                <a href={`/blog/articles/${slug}`} class={`w-3/4 font-semibold truncate text-sm sm:text-base lg:text-lg xl:text-xl transition-colors duration-150
                  ${data.category.id === "tech" ? "hover:text-accent-sub-base" : "hover:text-accent-base"}`}>{data.title}</a>
              </div>
            </li>
          );
        })}
      </ul>
    </div>
    </article>
    <aside class="pt-16 lg:pt-0 flex flex-col sm:gap-8 lg:w-[35%] lg:pl-[3.95rem] 2xl:pl-[5.925rem] 2xl:pr-[1.975rem]">
      <ProfileCard />
      <div class="lg:sticky lg:top-8 flex flex-col sm:gap-8">
        <CategoriesPanel client:visible />
        <TagCardsPanel client:visible />
      </div>
    </aside>
	</section>
</Base>